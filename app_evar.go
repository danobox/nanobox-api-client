package client

import (
	"time"
)

//
type (

	// AppEVar represents a Pagoda Box app environment variable
	AppEVar struct {
		AppID     string    `json:"app_id"`     // The ID of app the environment variable belongs to
		ID        string    `json:"id"`         // The ID of the environment variable
		Internal  bool      `json:"internal"`   // If the environment variable was generated by Pagoda Box
		ServiceID string    `json:"service_id"` // The ID of service the environment variable belongs to
		Title     string    `json:"title"`      // The 'key' of the environment variable
		UpdatedAt time.Time `json:"updated_at"` // The time of last update to this environment variable
		Value     string    `json:"value"`      // The 'value' of the environment variable
	}

	// AppEVarCreateOptions represents all available options when creating an app
	// environment variable
	AppEVarCreateOptions struct {
		AppID string `json:"app_id,omitempty"`
		Title string `json:"title,omitempty"`
		Value string `json:"value,omitempty"`
	}

	// AppEVarUpdateOptions represents all available options when updating an app
	// environment variable
	AppEVarUpdateOptions struct {
		Title string `json:"title,omitempty"`
		Value string `json:"value,omitempty"`
	}
)

// routes

// GetAppEVars returns an index of all an app's environment variables
func (c *Client) GetAppEVars(appSlug string) ([]AppEVar, error) {
	var appEVars []AppEVar
	return appEVars, c.get(&appEVars, "/apps/"+appSlug+"/environment_variables")
}

// CreateAppEVar creates a new app environment variable, with provided options
func (c *Client) CreateAppEVar(appSlug string, options *AppEVarCreateOptions) (*AppEVar, error) {

	body := toJSON(options)

	var appEVar AppEVar
	return &appEVar, c.post(&appEVar, "/apps/"+appSlug+"/environment_variables", string(body))
}

// GetAppEVar returns the specified app environment variable
func (c *Client) GetAppEVar(appSlug, appEVarID string) (*AppEVar, error) {
	var appEVar AppEVar
	return &appEVar, c.get(&appEVar, "/apps/"+appSlug+"/environment_variables/"+appEVarID)
}

// UpdateAppEVar updates the specified app environment variable, with provided
// options
func (c *Client) UpdateAppEVar(appSlug, appEVarID string, options *AppEVarUpdateOptions) (*AppEVar, error) {
	var appEVar AppEVar
	return &appEVar, c.put(&appEVar, "/apps/"+appSlug+"/environment_variables/"+appEVarID, options)
}

// DeleteAppEVar deletes the specified app environment variable
func (c *Client) DeleteAppEVar(appSlug, appEVarID string) error {
	return c.delete("/apps/" + appSlug + "/environment_variables/" + appEVarID)
}
