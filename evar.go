package client

import (
	"time"
)

//
type (

	// EVar represents a Nanobox app environment variable
	EVar struct {
		AppID     string    `json:"app_id"`     // The ID of app the environment variable belongs to
		CreatedAt time.Time `json:"created_at"` //
		ID        string    `json:"id"`         // The ID of the environment variable
		Internal  bool      `json:"internal"`   // If the environment variable was generated by Nanobox
		ServiceID string    `json:"service_id"` // The ID of service the environment variable belongs to
		Title     string    `json:"title"`      // The 'key' of the environment variable
		UpdatedAt time.Time `json:"updated_at"` // The time of last update to this environment variable
		Value     string    `json:"value"`      // The 'value' of the environment variable
	}

	// EVarCreateOptions represents all available options when creating an app
	// environment variable
	EVarCreateOptions struct {
		AppID string `json:"app_id,omitempty"`
		Title string `json:"title,omitempty"`
		Value string `json:"value,omitempty"`
	}

	// EVarUpdateOptions represents all available options when updating an app
	// environment variable
	EVarUpdateOptions struct {
		Title string `json:"title,omitempty"`
		Value string `json:"value,omitempty"`
	}
)

// routes

// GetEVars returns an index of all an app's environment variables
func (c *Client) GetEVars() ([]EVar, error) {
	var eVars []EVar
	return eVars, c.get(&eVars, "/evars")
}

// CreateEVar creates a new app environment variable, with provided options
func (c *Client) CreateEVar(options *EVarCreateOptions) (*EVar, error) {

	body := toJSON(options)

	var eVar EVar
	return &eVar, c.post(&eVar, "/evars", string(body))
}

// GetEVar returns the specified app environment variable
func (c *Client) GetEVar(eVarID string) (*EVar, error) {
	var eVar EVar
	return &eVar, c.get(&eVar, "/evars/"+eVarID)
}

// UpdateEVar updates the specified app environment variable, with provided
// options
func (c *Client) UpdateEVar(eVarID string, options *EVarUpdateOptions) (*EVar, error) {
	var eVar EVar
	return &eVar, c.put(&eVar, "/evars/"+eVarID, options)
}

// DeleteEVar deletes the specified app environment variable
func (c *Client) DeleteEVar(eVarID string) error {
	return c.delete("/environment_variables/" + eVarID)
}
